(function() {
  var CompositeDisposable, REPL, REPLFormat, REPLPython, REPLView, fs, stripAnsi,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  fs = require('fs');

  REPL = require('../Repl/ReplClass');

  REPLPython = require('../Repl/ReplClassPython');

  REPLFormat = require('../Repl/ReplFormat');

  stripAnsi = require('strip-ansi');

  CompositeDisposable = require('event-kit').CompositeDisposable;

  module.exports = REPLView = (function() {
    REPLView.prototype.dealWithInsert = function(event) {
      var buf;
      buf = this.replTextEditor.getCursorBufferPosition();
      if (!this.ignore && (this.lastBuf.row > buf.row ||  (this.lastBuf.row === buf.row && this.lastBuf.column > buf.column))) {
        return event.cancel();
      }
    };

    REPLView.prototype.interprete = function(select) {
      return this.repl.writeInRepl(select, true);
    };

    REPLView.prototype.remove = function() {
      this.subscribe.clear();
      return this.repl.remove();
    };

    REPLView.prototype.dealWithBackspace = function() {
      var buf;
      buf = this.replTextEditor.getCursorBufferPosition();
      if (this.lastBuf.row > buf.row ||  (this.lastBuf.row === buf.row && this.lastBuf.column >= buf.column)) {
        this.ignore = true;
        this.replTextEditor.insertText(' ');
        this.ignore = false;
      }
    };

    REPLView.prototype.dealWithDelete = function() {
      'Gerer suppression text Selection';
      var buf;
      buf = this.replTextEditor.getCursorBufferPosition();
      if (this.lastBuf.row > buf.row ||  (this.lastBuf.row === buf.row && this.lastBuf.column > buf.column)) {
        this.ignore = true;
        this.replTextEditor.insertText(' ');
        this.replTextEditor.moveLeft(1);
        this.ignore = false;
      }
    };

    REPLView.prototype.dealWithEnter = function() {
      var buf;
      this.replTextEditor.moveToBottom();
      this.replTextEditor.moveToEndOfLine();
      buf = this.replTextEditor.getCursorBufferPosition();
      this.repl.writeInRepl(this.replTextEditor.getTextInBufferRange([this.lastBuf, buf]) + '\n', false);
      return this.lastBuf = buf;
    };

    REPLView.prototype.setGrammar = function() {
      var grammar, grammars, _i, _len;
      grammars = atom.grammars.getGrammars();
      for (_i = 0, _len = grammars.length; _i < _len; _i++) {
        grammar = grammars[_i];
        if (grammar.name === this.grammarName) {
          this.replTextEditor.setGrammar(grammar);
          return;
        }
      }
    };

    REPLView.prototype.dealWithUp = function() {
      var buf;
      this.replTextEditor.moveToEndOfLine();
      buf = this.replTextEditor.getCursorBufferPosition();
      return this.repl.history(true, this.replTextEditor.getTextInBufferRange([this.lastBuf, buf]));
    };

    REPLView.prototype.dealWithDown = function() {
      var buf;
      this.replTextEditor.moveToEndOfLine();
      buf = this.replTextEditor.getCursorBufferPosition();
      return this.repl.history(false, this.replTextEditor.getTextInBufferRange([this.lastBuf, buf]));
    };

    REPLView.prototype.setTextEditor = function(textEditor) {
      var textEditorElement;
      this.replTextEditor = textEditor;
      this.subscribe.add(this.replTextEditor.onWillInsertText(this.dealWithInsert));
      this.subscribe.add(textEditorElement = atom.views.getView(this.replTextEditor));
      this.subscribe.add(atom.commands.add(textEditorElement, {
        'editor:newline': (function(_this) {
          return function() {
            return _this.dealWithEnter();
          };
        })(this)
      }));
      this.subscribe.add(atom.commands.add(textEditorElement, {
        'core:move-up': (function(_this) {
          return function() {
            return _this.dealWithUp();
          };
        })(this)
      }));
      this.subscribe.add(atom.commands.add(textEditorElement, {
        'core:move-down': (function(_this) {
          return function() {
            return _this.dealWithDown();
          };
        })(this)
      }));
      this.subscribe.add(atom.commands.add(textEditorElement, {
        'core:backspace': (function(_this) {
          return function() {
            return _this.dealWithBackspace();
          };
        })(this)
      }));
      this.subscribe.add(atom.commands.add(textEditorElement, {
        'core:delete': (function(_this) {
          return function() {
            return _this.dealWithDelete();
          };
        })(this)
      }));
      return this.setGrammar();
    };

    REPLView.prototype.setRepl = function(repl) {
      return this.repl = repl;
    };

    REPLView.prototype.dealWithRetour = function(data, append) {
      var buf, select;
      if (append) {
        this.replTextEditor.insertText(stripAnsi("" + data));
        return this.lastBuf = this.replTextEditor.getCursorBufferPosition();
      } else {
        'à amélioré , (saut de ligne et string vide etc...)';
        this.replTextEditor.moveToBottom();
        this.replTextEditor.moveToEndOfLine();
        buf = this.replTextEditor.getCursorBufferPosition();
        return this.replTextEditor.setTextInBufferRange([this.lastBuf, buf], "" + data, select = true);
      }
    };

    function REPLView(grammarName, file, callBackCreate) {
      var format, self, uri;
      this.grammarName = grammarName;
      this.dealWithRetour = __bind(this.dealWithRetour, this);
      this.setRepl = __bind(this.setRepl, this);
      this.setTextEditor = __bind(this.setTextEditor, this);
      this.setGrammar = __bind(this.setGrammar, this);
      this.dealWithEnter = __bind(this.dealWithEnter, this);
      this.dealWithDelete = __bind(this.dealWithDelete, this);
      this.dealWithBackspace = __bind(this.dealWithBackspace, this);
      this.remove = __bind(this.remove, this);
      this.interprete = __bind(this.interprete, this);
      this.dealWithInsert = __bind(this.dealWithInsert, this);
      self = this;
      this.subscribe = new CompositeDisposable;
      format = new REPLFormat("../../Repls/" + file);
      this.lastBuf = 0;
      this.ignore = false;
      uri = "REPL: " + this.grammarName;
      atom.workspace.open(uri, {
        split: 'right'
      }).done((function(_this) {
        return function(textEditor) {
          var pane;
          pane = atom.workspace.getActivePane();
          if (self.grammarName === "Python Console3" || self.grammarName === "Python Console2" || self.grammarName === "Python") {
            _this.grammarName = "Python Console";
            self.setTextEditor(textEditor);
            self.setRepl(new REPLPython(format, self.dealWithRetour));
          } else {
            self.setTextEditor(textEditor);
            self.setRepl(new REPL(format, self.dealWithRetour));
          }
          return callBackCreate(self, pane);
        };
      })(this));
    }

    return REPLView;

  })();

}).call(this);

//# sourceMappingURL=data:application/json;base64,

//# sourceURL=/C:/Users/wd6g14/.atom/packages/repl/lib/Repl-View/ReplView.coffee

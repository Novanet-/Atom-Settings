(function() {
  var Repl, child_process, fs;

  fs = require('fs');

  child_process = require('child_process');

  module.exports = Repl = (function() {
    Repl.prototype.remove = function() {
      console.log("kill Repl");
      return this.replProcess.kill('SIGKILL');
    };

    Repl.prototype.processCmd = function() {
      var cmd;
      this.indiceH = -1;
      if (this.processing) {
        this.retour(this.prompt, true);
      }
      if (this.cmdQueue.length > 0) {
        this.processing = true;
        cmd = this.cmdQueue.shift();
        if (cmd[1]) {
          this.print += cmd[0];
        }
        this.replProcess.stdin.write(cmd[0]);
        if (cmd[0].slice(-this.endSequence.length) !== this.endSequence) {
          'if not ending with end sequence execute next one';
          this.processing = false;
          return this.processCmd();
        }
      } else {
        return this.processing = false;
      }
    };

    Repl.prototype.history = function(up, last) {
      var h;
      if (this.indiceH === -1) {
        this.last = last;
      }
      if (up && this.historique.length - 1 > this.indiceH) {
        this.indiceH = this.indiceH + 1;
      }
      if (!up && this.indiceH >= 0) {
        this.indiceH = this.indiceH - 1;
      }
      if (this.indiceH === -1) {
        this.retour(this.last, false);
        return;
      }
      h = this.historique[this.indiceH].substring(0, this.historique[this.indiceH].length - 1);
      return this.retour(h, false);
    };

    Repl.prototype.processOutputData = function(data) {
      this.print += "" + data;
      this.retour(this.print, true);
      this.print = "";
      return this.processCmd();
    };

    Repl.prototype.processErrorData = function(data) {
      this.print += "" + data;
      process.stderr.write(this.print);
      this.print = "";
      return this.processCmd();
    };

    Repl.prototype.closeRepl = function(code) {
      return console.log('child process exited with code ' + code);
    };

    Repl.prototype.writeInRepl = function(cmd, write_cmd) {
      var element, lines, _i, _len;
      if (write_cmd) {
        if (cmd.slice(-this.endSequence.length) !== this.endSequence) {
          cmd = cmd + this.endSequence;
        }
        lines = cmd.split(this.endSequence);
        for (_i = 0, _len = lines.length; _i < _len; _i++) {
          element = lines[_i];
          if (element !== "") {
            this.historique.unshift(element + this.endSequence);
            this.cmdQueue.push([element + this.endSequence, write_cmd]);
          }
        }
      } else {
        this.historique.unshift(cmd);
        this.cmdQueue.push([cmd, write_cmd]);
      }
      if (!this.processing) {
        return this.processCmd();
      }
    };

    function Repl(r_format, retour) {
      var args, self;
      this.retour = retour;
      this.historique = new Array();
      this.indiceH = -1;
      self = this;
      this.processing = true;
      this.cmd = r_format.cmd;
      args = r_format.args;
      this.prompt = r_format.prompt;
      this.endSequence = r_format.endSequence;
      this.print = "";
      this.cmdQueue = new Array();
      this.replProcess = child_process.spawn(cmd, args);
      console.log(cmd);
      this.replProcess.stdout.on('data', function(data) {
        return self.processOutputData(data);
      });
      this.replProcess.stderr.on('data', function(data) {
        return self.processErrorData(data);
      });
      this.replProcess.on('close', function() {
        return self.closeRepl();
      });
      this.retour(this.print, true);
    }

    return Repl;

  })();

  'sh = new ReplSh()\nocaml = new ReplOcaml()\n\nmyrepl = new Repl(ocaml)\nmyrepl.writeInRepl(\'let a l = match l with\n\')\nmyrepl.writeInRepl("| _ -> true;;\n")\n#myrepl.writeInRepl("let _ = 3*2;;\n")';

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiZmlsZTovLy9DOi9Vc2Vycy93ZDZnMTQvLmF0b20vcGFja2FnZXMvcmVwbC9saWIvUmVwbC9SZXBsQ2xhc3MuY29mZmVlIgogIF0sCiAgIm5hbWVzIjogW10sCiAgIm1hcHBpbmdzIjogIkFBQUE7QUFBQSxNQUFBLHVCQUFBOztBQUFBLEVBQUEsRUFBQSxHQUFLLE9BQUEsQ0FBUSxJQUFSLENBQUwsQ0FBQTs7QUFBQSxFQUNBLGFBQUEsR0FBZ0IsT0FBQSxDQUFRLGVBQVIsQ0FEaEIsQ0FBQTs7QUFBQSxFQUdBLE1BQU0sQ0FBQyxPQUFQLEdBQ007QUFFRixtQkFBQSxNQUFBLEdBQVMsU0FBQSxHQUFBO0FBQ1AsTUFBQSxPQUFPLENBQUMsR0FBUixDQUFZLFdBQVosQ0FBQSxDQUFBO2FBQ0EsSUFBQyxDQUFBLFdBQVcsQ0FBQyxJQUFiLENBQWtCLFNBQWxCLEVBRk87SUFBQSxDQUFULENBQUE7O0FBQUEsbUJBSUEsVUFBQSxHQUFXLFNBQUEsR0FBQTtBQUNULFVBQUEsR0FBQTtBQUFBLE1BQUEsSUFBQyxDQUFBLE9BQUQsR0FBVyxDQUFBLENBQVgsQ0FBQTtBQUNBLE1BQUEsSUFBRyxJQUFDLENBQUEsVUFBSjtBQUNFLFFBQUEsSUFBQyxDQUFBLE1BQUQsQ0FBUSxJQUFDLENBQUEsTUFBVCxFQUFnQixJQUFoQixDQUFBLENBREY7T0FEQTtBQUdBLE1BQUEsSUFBRyxJQUFDLENBQUEsUUFBUSxDQUFDLE1BQVYsR0FBbUIsQ0FBdEI7QUFDRSxRQUFBLElBQUMsQ0FBQSxVQUFELEdBQWMsSUFBZCxDQUFBO0FBQUEsUUFDQSxHQUFBLEdBQU0sSUFBQyxDQUFBLFFBQVEsQ0FBQyxLQUFWLENBQUEsQ0FETixDQUFBO0FBRUEsUUFBQSxJQUFJLEdBQUksQ0FBQSxDQUFBLENBQVI7QUFDSSxVQUFBLElBQUMsQ0FBQSxLQUFELElBQVUsR0FBSSxDQUFBLENBQUEsQ0FBZCxDQURKO1NB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

//# sourceURL=/C:/Users/wd6g14/.atom/packages/repl/lib/Repl/ReplClass.coffee

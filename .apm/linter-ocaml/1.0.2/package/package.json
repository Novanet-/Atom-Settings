{"name":"linter-ocaml","main":"./lib/atom-merlin-ocaml","version":"1.0.2","description":"Lint ocaml on the fly, using merlin.","keywords":["linter","ocaml","merlin"],"repository":{"type":"git","url":"git+https://github.com/eriklovlie/automatic-octo-computing-machine.git"},"license":"MIT","engines":{"atom":">=1.0.0 <2.0.0"},"providedServices":{"linter":{"versions":{"1.0.0":"provideLinter"}}},"dependencies":{"atom-linter":"^4.4.0","atom-package-deps":"^3.0.7"},"package-deps":["linter"],"readme":"# linter-ocaml\n\nThis is a linter for OCaml using [merlin] for the actual linting. It builds on [atom-linter], like many of the other linter packages.\n\nSince it is [atom-linter] that takes care of the decorations I may as well\nsteal a screenshot. Imagine the following is OCaml instead of JavaScript:\n\n![Preview](https://camo.githubusercontent.com/70b6e697c9d793642414b4ea6d08dbb9678877b3/687474703a2f2f672e7265636f726469742e636f2f313352666d6972507a322e676966)\n\n[merlin]: https://github.com/the-lambda-church/merlin\n[atom-linter]: https://github.com/atom-community/linter\n\n## Caveat Emptor\n\nThis package is not amazingly well tested, since the author is still unfamiliar\nwith most of the technologies involved (OCaml, Node.js, CoffeeScript, Atom,\netc).\n\nThat said it does appear to work in my (tiny) OCaml projects.\n\n## Features\n\nIt's a linter so it shows errors and warnings when you save a file. That's it.\n\nYou probably want to install [language-ocaml] to get syntax highlighting.\n\n[language-ocaml]: https://atom.io/packages/language-ocaml\n\n## Installation\n\nThe [package] itself can be installed the normal way (from the Atom package\ninstaller).\n\n[package]: https://atom.io/packages/linter-ocaml\n\nIt depends on `ocamlmerlin` being in `PATH`. The simple way to do this is\nto install [opam] and then install merlin:\n\n`opam install merlin`\n\n[opam]: https://opam.ocaml.org/doc/Install.html\n\nAdditionally you must have a working merlin setup for you project. IOW you must\nhave a `.merlin` file in your project root directory.\n\nIf you are an experienced OCaml person you may stop reading now (or continue\nreading and then report any mistakes or bad advice).\n\nI'm not experienced in OCaml so YMMV, however my projects are set up as follows.\n\nA `.merlin` file which looks something like this (add all the packages you need):\n\n```\nS src/**\nB _build/**\nPKG core_kernel\nPKG core\nPKG core_extended\n```\n\nI then have a small build script:\n\n```\n#!/usr/bin/env bash\ncorebuild -package core_extended -I src yo.byte\n```\n\nThe above assumes you have your sources in `src` (and your main program is\n`yo.ml`). The globbing in `.merlin` is needed because `ocamlbuild` makes\nsubdirectories inside `_build` and merlin needs to see all the cmi files to\nfind symbols and whatnot.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/eriklovlie/automatic-octo-computing-machine/issues"},"homepage":"https://github.com/eriklovlie/automatic-octo-computing-machine#readme","_id":"linter-ocaml@1.0.2","_shasum":"4d684c0064b5ac03bca32f8020840c80f12b00d1","_resolved":"file:..\\d-116211-1676-zrz2vm\\package.tgz","_from":"..\\d-116211-1676-zrz2vm\\package.tgz"}